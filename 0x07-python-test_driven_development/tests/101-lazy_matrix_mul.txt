# 101-lazy_matrix_mul.txt

======================================
This is the testing module for the function `lazy_lazy_matrix_mul(m_a, m_b):
that is in the module `100-lazy_matrix_mul`.
=======================================

Usage:
======
`lazy_matrix_mul` function takes two matrix of int or floats  and 
calculate multiplying usin numpy module

Test Cases:
===========

# import the function
>>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

# missing arrguments

>>> m_a = [
... [1, 3, 5],
... [3, 9, 6],
... [9, 8, 8],
... [0, 0, 0],
... ]
>>> lazy_matrix_mul()
Traceback (most recent call last):
...
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
>>> lazy_matrix_mul(m_a)
Traceback (most recent call last):
...
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

# calling with empty list

>>> m_a = m_b = []
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
ValueError: m_a can't be empty
>>> m_a = [
... [1, 3, 5],
... [3, 9, 6],
... [9, 8, 8],
... [0, 0, 0],
... ]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
ValueError: m_b can't be empty

# calling with matrix of empty lists

>>> m_a = [[]]
>>> m_b = [
... [],
... [],
... []]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
ValueError: m_a can't be empty
>>> m_a = [
... [1, 3, 5],
... [3, 9, 6],
... [9, 8, 8],
... [0, 0, 0],
... ]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
ValueError: m_b can't be empty
>>> m_b, m_a = m_a, m_b
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
ValueError: m_a can't be empty

# Arguments are lists of other data Types

>>> m_a = ["[1, 2]", "[2, 3]", "[3, 4]"]
>>> m_b = [
... [10, 4, 1, 2, 4],
... [3, 3, 3, 3, 3]
... ]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

m_a = m_b
m_b = list_of_tuples = [(1, 2), (3, 4), (5, 6)]
Traceback (most recent call last):

TypeError: m_b must be a list of lists

# Arguments are not lists

>>> lazy_matrix_mul("matrix1", "matrix2")
Traceback (most recent call last):
...
TypeError: m_a must be a list

>>> lazy_matrix_mul([[3]], "[[3]]")
Traceback (most recent call last):
...
TypeError: m_b must be a list

>>> lazy_matrix_mul({1: [1, 2]}, {2: [3, 4]})
Traceback (most recent call last):
...
TypeError: m_a must be a list

# Arguments None

>>> lazy_matrix_mul(None, {2: [3, 4]})
Traceback (most recent call last):
...
TypeError: m_a must be a list

>>> lazy_matrix_mul(None, None)
Traceback (most recent call last):
...
TypeError: m_a must be a list

>>> lazy_matrix_mul([[10, 20], [30, 40]], None)
Traceback (most recent call last):
...
TypeError: m_b must be a list

# each of the matrix should the same numer of columns in each row

>>> m_a = [
... [1, 3, 5],
... [3, 9, 6],
... [9, 8, 8],
... [0, 0, 0],
... ]
>>> m_b = [
... [1, 3, 5],
... [3, 9, 6],
... [9, 8],
... [0, 0, 0],
... ]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size

>>> m_a = [
... [1, 3, 1],
... [3, 9, 6],
... [9, 8, 8],
... [2, 2, 2, 2, 2, 2],
... ]
>>> m_b = [
... [1, 3, 5],
... [3, 9, 6],
... [9, 8, 2, 2, 2, 2],
... [0, 0, 0],
... ]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size

>>> m_a = [
... [1, 3, 5],
... [3, 9, 6],
... [0, 0, 0],
... ]
>>> m_b = [
... [1, 3, 5],
... [3, 9, 6],
... [],
... [0, 0, 0],
... ]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
ValueError: m_b can't be empty

# If m_a and m_b canâ€™t be multiplied: matrix[columns] != matrix2 [rows]
>>> m_a = [
... [1, 3, 5],
... [3, 9, 6],
... [0, 0, 0],
... ]
>>> m_b = [
... [1, 3, 5],
... [3, 9, 6],
... [0, 0, 0],
... [0, 0, 0],
... ]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied

# if one element of those list of lists is not an integer or a float
>>> m_a = [
... [1, 3, 5],
... [3, 9, 6],
... ["0", "0", "0"],
... ]
>>> m_b = [
... [1, 3, 5],
... [3, 9, 6],
... [0, 0, 0],
... ]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

# valid operation
>>> m_a = [
... [1, 3, 5],
... [3, 9, 6],
... [0, 0, 0],
... ]
>>> m_b = [
... [1, 3, 5],
... [3, 9, 6],
... [0, 0, 0],
... ]
>>> lazy_matrix_mul(m_a, m_b)
array([[10, 30, 23],
       [30, 90, 69],
       [ 0,  0,  0]])

# not same row and column number and including float numbers
>>> m_a = [
... [1, 3, 5],
... [3, 9, 6],
... [-1, -9, -10],
... [-1, 6, -10],
... ]
>>> m_b = [
... [1, 3, 5, 2.0, 6.1],
... [3, 9, 6, 1.1, 2.5],
... [-3, 8, 100, 1, 1],
... ]
>>> lazy_matrix_mul(m_a, m_b) # doctest: +ELLIPSIS
array([[   -5. ,    70. ,   523. ,    10.3,    18.6],
       [   12. ,   138. ,   669. ,    21.9,    46.8],
       [    2. ,  -164. , -1059. ,   -21.9,   -38.6],
       [   47. ,   -29. ,  -969. ,    -5.4,    -1.1]])


>>> m_a = [
... ["1", 3, 5],
... [],
... [-1, -9, -10],
... [-1, 6, -10],
... ]
>>> m_b = [
... [1, 3, 5, 2.0, 6.1],
... [3, 9, 6, 1.1, 2.5],
... [-3, 8, 100, 1, 1],
... ]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
ValueError: m_a can't be empty

>>> m_a = [
... [[], 3, 5],
... [-1, -9, -10],
... [-1, 6, -10],
... ]
>>> m_b = [
... [1, 3, 5, 2.0, 6.1],
... [3, 9, 6, 1.1, 2.5],
... [-3, 8, 100, 1, 1],
... ]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

>>> m_a = [
... [1, 3, 5],
... [-1],
... [-1, 6, -10],
... ]
>>> m_b = None
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: m_b must be a list

>>> m_a = [
... [1]
... ]
>>> m_b = [
... [0.0]
... ]
>>> lazy_matrix_mul(m_a, m_b)
array([[0.]])

>>> m_a = [
... [float('inf')]
... ]
>>> m_b = [
... [0.0]
... ]
>>> lazy_matrix_mul(m_a, m_b)
array([[nan]])

>>> m_a = [
... [float('inf')]
... ]
>>> m_b = [
... [0.0],
... [0.0]
... ]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied

>>> m_a = [
... [float('inf'), "Nan"]
... ]
>>> m_b = [
... [0.0],
... [0.0, 1]
... ]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats
