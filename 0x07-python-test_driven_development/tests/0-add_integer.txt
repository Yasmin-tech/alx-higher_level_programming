# 0-add_integer.txt

======================================
This is the testing module for the function `add_integer(a, b=98)`
that is in the module `0-add_integer.py `.
=======================================

Usage:
======
`add_integer` function takes two integer (a, b(optional)) and 
calculate a + b, b by default is 98.

Test Cases:
===========

# import the function
>>> add_integer = __import__('0-add_integer').add_integer

# two positive and negative integers
>>> add_integer(10, 20)
30
>>> add_integer(1000, -4500)
-3500

# the function can also take float numbers but it does casting
        them to integers before calculating the addition
>>> add_integer(-2.3, 4.1)
2
>>> add_integer(5.4, 9.5)
14
>>> add_integer(5.5, 9.6)
14
>>> add_integer(float(100.8), float(8))
108

# if the function is only called with one arrgument(a), b = 98
>> add_integer(float(98.7))
196

# Very big number will cause OverFlowError
>>> add_integer(2e15, 200)
2000000000000200
>>> add_integer(4e10, 2e400)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer
>>> add_integer(float('inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

# Check for NaN (float point number which is not considered a number)
>>> add_integer(float('inf') - float('inf'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer

>>> add_integer(float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer

>>> add_integer(2, float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer

# The program only accepts values as int or float, otherwise, it raises TypeError
>>> add_integer("300", 600)
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer(0.0, [9, 0])
Traceback (most recent call last):
...
TypeError: b must be an integer

>>> add_integer(None)
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer("Hello", 9)
Traceback (most recent call last):
...
TypeError: a must be an integer

# if both arrgument are invalid, the program will raise the error for the first one
>>> a = None
>>> b = None
>>> add_integer(a, b)
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> a = 10
>>> add_integer(a, b)
Traceback (most recent call last):
...
TypeError: b must be an integer
>>> b = 100000
>>> add_integer(a, b)
100010

# missiging at least one required arrgument
>>> add_integer()
Traceback (most recent call last):
...
TypeError: add_integer() missing 1 required positional argument: 'a'